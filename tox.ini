[tox]
envlist = py39,pep8
isolated_build = true

[testenv]
passenv = DATABASE_URL
use_develop = true
skip_install = true
deps =
  pytest
  pytest-asyncio
  httpx
commands_pre = pip install -r requirements.txt
commands = pytest {posargs}

[testenv:start]
commands =
  {[testenv:db_upgrade]commands}
  uvicorn wod_board.web:app --reload --port 8500

[testenv:prod]
deps= -rrequirements.txt
commands =
  {[testenv:db_upgrade]commands}

[testenv:genreqs]
recreate = true
skip_install = true
deps =
commands_pre =
whitelist_externals = bash
commands =
  bash -c "sed -e '/^-e ./d' requirements.txt > constraints.txt"
  pip install -c constraints.txt -e .
  pip uninstall --yes wod_board
  bash -c "pip freeze --exclude-editable >| requirements.txt"
  bash -c "echo '-e .' >> requirements.txt"

[testenv:pep8]
deps =
    black
    flake8
    isort
    mypy
    sqlalchemy2-stubs
commands =
    black --check wod_board
    flake8
    isort -c wod_board
    mypy

[testenv:db_revision]
deps =
    black
    isort
commands = alembic revision --autogenerate {posargs}

[testenv:db_upgrade]
commands = alembic upgrade head

[testenv:coverage]
passenv = 
  {[testenv]passenv}
  COVERALLS_REPO_TOKEN
deps =
  {[testenv]deps}
  coverage
  coveralls
allowlist_externals = bash
commands =
  coverage run -m pytest
  coverage report
  coverage html
  bash -c 'if [ $COVERALLS_REPO_TOKEN ]; then coveralls; fi'

[coverage:report]
omit =
  .tox/*
  */migrations/*
  */tests/*

[flake8]
exclude = .tox,frontend,alembic
max-line-length = 88
extend-ignore = E203, E231, W503, D100

[isort]
force_single_line = true
lines_after_imports = 2
force_sort_within_sections = true
known_first_party = wod_board
known_third_party = fastapi, sqlalchemy
default_section = THIRDPARTY
skip = .tox,frontend
